"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5491],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),m=n,f=p["".concat(s,".").concat(m)]||p[m]||d[m]||i;return r?a.createElement(f,o(o({ref:t},u),{},{components:r})):a.createElement(f,o({ref:t},u))}));function m(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8215:function(e,t,r){r.d(t,{Z:function(){return n}});var a=r(7294);function n(e){var t=e.children,r=e.hidden,n=e.className;return a.createElement("div",{role:"tabpanel",hidden:r,className:n},t)}},9877:function(e,t,r){r.d(t,{Z:function(){return u}});var a=r(7462),n=r(7294),i=r(2389),o=r(5450),l=r(6010),s="tabItem_LplD";function c(e){var t,r,i,c=e.lazy,u=e.block,d=e.defaultValue,p=e.values,m=e.groupId,f=e.className,b=n.Children.map(e.children,(function(e){if((0,n.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=p?p:b.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),v=(0,o.lx)(y,(function(e,t){return e.value===t.value}));if(v.length>0)throw new Error('Docusaurus error: Duplicate values "'+v.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var g=null===d?d:null!=(t=null!=d?d:null==(r=b.find((function(e){return e.props.default})))?void 0:r.props.value)?t:null==(i=b[0])?void 0:i.props.value;if(null!==g&&!y.some((function(e){return e.value===g})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+g+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var h=(0,o.UB)(),k=h.tabGroupChoices,C=h.setTabGroupChoices,w=(0,n.useState)(g),N=w[0],T=w[1],I=[],S=(0,o.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var O=k[m];null!=O&&O!==N&&y.some((function(e){return e.value===O}))&&T(O)}var x=function(e){var t=e.currentTarget,r=I.indexOf(t),a=y[r].value;a!==N&&(S(t),T(a),null!=m&&C(m,a))},P=function(e){var t,r=null;switch(e.key){case"ArrowRight":var a=I.indexOf(e.currentTarget)+1;r=I[a]||I[0];break;case"ArrowLeft":var n=I.indexOf(e.currentTarget)-1;r=I[n]||I[I.length-1]}null==(t=r)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":u},f)},y.map((function(e){var t=e.value,r=e.label,i=e.attributes;return n.createElement("li",(0,a.Z)({role:"tab",tabIndex:N===t?0:-1,"aria-selected":N===t,key:t,ref:function(e){return I.push(e)},onKeyDown:P,onFocus:x,onClick:x},i,{className:(0,l.Z)("tabs__item",s,null==i?void 0:i.className,{"tabs__item--active":N===t})}),null!=r?r:t)}))),c?(0,n.cloneElement)(b.filter((function(e){return e.props.value===N}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==N})}))))}function u(e){var t=(0,i.Z)();return n.createElement(c,(0,a.Z)({key:String(t)},e))}},7782:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return d},assets:function(){return p},toc:function(){return m},default:function(){return b}});var a=r(7462),n=r(3366),i=(r(7294),r(3905)),o=r(9877),l=r(8215),s=["components"],c={sidebar_position:2,title:"Contracts"},u=void 0,d={unversionedId:"Bitlayer Scan APIs/Contracts",id:"Bitlayer Scan APIs/Contracts",title:"Contracts",description:"Get Contract ABI for Verified Contract Source Codes",source:"@site/docs/Bitlayer Scan APIs/Contracts.mdx",sourceDirName:"Bitlayer Scan APIs",slug:"/Bitlayer Scan APIs/Contracts",permalink:"/EXAPI/docs/Bitlayer Scan APIs/Contracts",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Contracts"},sidebar:"docs",previous:{title:"Accounts",permalink:"/EXAPI/docs/Bitlayer Scan APIs/Accounts"},next:{title:"Transactions",permalink:"/EXAPI/docs/Bitlayer Scan APIs/Transactions"}},p={},m=[{value:"Get Contract ABI for Verified Contract Source Codes",id:"get-contract-abi-for-verified-contract-source-codes",level:2},{value:"Get Contract Source Code for Verified Contract Source Codes",id:"get-contract-source-code-for-verified-contract-source-codes",level:2},{value:"Verify Source Code (beta)",id:"verify-source-code-beta",level:2}],f={toc:m};function b(e){var t=e.components,r=(0,n.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},f,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"get-contract-abi-for-verified-contract-source-codes"},"Get Contract ABI for Verified Contract Source Codes"),(0,i.kt)("p",null,"Returns the Contract Application Binary Interface ( ABI ) of a verified smart contract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},"https://api-testnet.bitlayer.org/scan/api?module=contract&action=getabi&address=0xc9121e476155ebf0b794b7b351808af3787e727d\n")),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"request",label:"Request",default:!0,mdxType:"TabItem"},"Query Parameters",(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"address"),(0,i.kt)("td",{parentName:"tr",align:null},"the ",(0,i.kt)("inlineCode",{parentName:"td"},"contract address")," that has a verified source code"))))),(0,i.kt)(l.Z,{value:"example",label:"Example",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'var Web3 = require(\'web3\');\nvar web3 = new Web3(new Web3.providers.HttpProvider());\nvar version = web3.version.api;\n\n$.getJSON(\'//api-testnet.bitlayer.org/scan/api?module=contract&action=getabi&address=0x66a79d23e58475d2738179ca52cd0b41d73f0bea\', function (data) {\n\u2003var contractABI = "";\n\u2003\u2003contractABI = JSON.parse(data.result);\n\u2003if (contractABI != \'\'){\n\u2003\u2003var MyContract = web3.eth.contract(contractABI);\n\u2003\u2003var myContractInstance = MyContract.at("0x66a79d23e58475d2738179ca52cd0b41d73f0bea");\n\u2003\u2003var result = myContractInstance.memberId("0xfe8ad7dd2f564a877cc23feea6c0a9cc2e783715");\n\u2003\u2003console.log("result1 : " + result);\n\u2003\u2003var result = myContractInstance.members(1);\n\u2003\u2003console.log("result2 : " + result);\n\u2003} else {\n\u2003\u2003console.log("Error");\n\u2003}\n});\n')))),(0,i.kt)("h2",{id:"get-contract-source-code-for-verified-contract-source-codes"},"Get Contract Source Code for Verified Contract Source Codes"),(0,i.kt)("p",null,"Returns the source code of a verified smart contract."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},"https://api-testnet.bitlayer.org/scan/api?module=contract&action=getsourcecode&address=0xc9121e476155ebf0b794b7b351808af3787e727d\n")),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"request",label:"Request",default:!0,mdxType:"TabItem"},"Query Parameters",(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"address"),(0,i.kt)("td",{parentName:"tr",align:null},"the ",(0,i.kt)("inlineCode",{parentName:"td"},"contract address")," that has a verified source code"))))),(0,i.kt)(l.Z,{value:"response",label:"Response",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},"sample response\n")))),(0,i.kt)("h2",{id:"verify-source-code-beta"},"Verify Source Code (beta)"),(0,i.kt)("p",null,"`1\u3001Current daily limit of 100 submissions per day per user (subject to change)"),(0,i.kt)("p",null,"2\u3001Only supports HTTP post due to max transfer size limitations for http get"),(0,i.kt)("p",null,"3\u3001Supports up to 10 different library pairs"),(0,i.kt)("p",null,'4\u3001Contracts that use "imports" will need to have the code concatenated into one file as we do not support "imports" in separate files. You can try using the Blockcat solidity-flattener or SolidityFlattery'),(0,i.kt)("p",null,"5\u3001List of supported solc versions, only solc version v0.4.11 and above is supported. Ex. v0.4.25+commit.59dbf8f1"),(0,i.kt)("p",null,"6\u3001Upon successful submission you will receive a GUID (50 characters) as a receipt."),(0,i.kt)("p",null,"7\u3001You may use this GUID to track the status of your submission"),(0,i.kt)("p",null,"8\u3001Verified Source Codes will be displayed at contractsVerified`"),(0,i.kt)("p",null,"Source Code Submission Gist (returns a guid as part of the result upon success):"),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"sourcecode",label:"Source Code Submission Gist (returns a guid as part of the result upon success):",default:!0,mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},"//Submit Source Code for Verification\n$.ajax({\n\u2003type: \"POST\", //Only POST supported\n\u2003url: \"//api-testnet.bitlayer.org/scan/api\", //Set to the correct API url for Other Networks\n\u2003data: {\n\u2003\u2003apikey: $('#apikey').val(),\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003 //A valid API-Key is required\n\u2003\u2003module: 'contract',\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003//Do not change\n\u2003\u2003action: 'verifysourcecode',\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2002//Do not change\n\u2003\u2003contractaddress: $('#contractaddress').val(),\u2003\u2003//Contract Address starts with 0x...\n\u2003\u2003sourceCode: $('#sourceCode').val(),\u2003\u2003\u2003\u2003\u2003\u2003//Contract Source Code (Flattened if necessary)\n\u2003\u2003codeformat: $('#codeformat').val(),\u2003\u2003\u2003\u2003\u2003\u2003 //solidity-single-file (default) or solidity-standard-json-input (for std-input-json-format support\n\u2003\u2003contractname: $('#contractname').val(),\u2003\u2003\u2003\u2003 //ContractName (if codeformat=solidity-standard-json-input, then enter contractname as ex: erc20.sol:erc20)\n\u2003\u2003compilerversion: $('#compilerversion').val(),\u2003\u2003 //see https://api-testnet.bitlayer.org/scan/solcversions for list of support versions\n\u2003\u2003optimizationUsed: $('#optimizationUsed').val(),\u2003//0 = No Optimization, 1 = Optimization used (applicable when codeformat=solidity-single-file)\n\u2003\u2003runs: 200,\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003//set to 200 as default unless otherwise (applicable when codeformat=solidity-single-file)\n\u2003\u2003constructorArguements: $('#constructorArguements').val(),\u2003//if applicable\n\u2003\u2003evmversion: $('#evmVersion').val(),\u2003\u2003\u2003\u2003\u2003\u2003 //leave blank for compiler default, homestead, tangerineWhistle, spuriousDragon, byzantium, constantinople, petersburg, istanbul (applicable when codeformat=solidity-single-file)\n\u2003\u2003licenseType: $('#licenseType').val(),\u2003\u2003\u2003\u2003\u2003\u2003//Valid codes 1-12 where 1=No License .. 12=Apache 2.0, see https://api-testnet.bitlayer.org/scan/contract-license-types\n\u2003\u2003libraryname1: $('#libraryname1').val(),\u2003\u2003\u2003\u2003\u2003 //if applicable, a matching pair with libraryaddress1 required\n\u2003\u2003libraryaddress1: $('#libraryaddress1').val(),\u2003\u2003\u2003//if applicable, a matching pair with libraryname1 required\n\u2003\u2003libraryname2: $('#libraryname2').val(),\u2003\u2003\u2003\u2003\u2003//if applicable, matching pair required\n\u2003\u2003libraryaddress2: $('#libraryaddress2').val(),\u2003 \u2003 //if applicable, matching pair required\n\u2003\u2003libraryname3: $('#libraryname3').val(),\u2003\u2003\u2003\u2003\u2003//if applicable, matching pair required\n\u2003\u2003libraryaddress3: $('#libraryaddress3').val(),\u2003 \u2003 //if applicable, matching pair required\n\u2003\u2003libraryname4: $('#libraryname4').val(),\u2003\u2003\u2003\u2003\u2003//if applicable, matching pair required\n\u2003\u2003libraryaddress4: $('#libraryaddress4').val(),\u2003 \u2003 //if applicable, matching pair required\n\u2003\u2003libraryname5: $('#libraryname5').val(),\u2003\u2003\u2003\u2003\u2003//if applicable, matching pair required\n\u2003\u2003libraryaddress5: $('#libraryaddress5').val(),\u2003 \u2003 //if applicable, matching pair required\n\u2003\u2003libraryname6: $('#libraryname6').val(),\u2003\u2003\u2003\u2003\u2003//if applicable, matching pair required\n\u2003\u2003libraryaddress6: $('#libraryaddress6').val(),\u2003 \u2003 //if applicable, matching pair required\n\u2003\u2003libraryname7: $('#libraryname7').val(),\u2003\u2003\u2003\u2003\u2003//if applicable, matching pair required\n\u2003\u2003libraryaddress7: $('#libraryaddress7').val(),\u2003 \u2003 //if applicable, matching pair required\n\u2003\u2003libraryname8: $('#libraryname8').val(),\u2003\u2003\u2003\u2003\u2003//if applicable, matching pair required\n\u2003\u2003libraryaddress8: $('#libraryaddress8').val(),\u2003 \u2003 //if applicable, matching pair required\n\u2003\u2003libraryname9: $('#libraryname9').val(),\u2003\u2003\u2003\u2003\u2003//if applicable, matching pair required\n\u2003\u2003libraryaddress9: $('#libraryaddress9').val(),\u2003 \u2003 //if applicable, matching pair required\n\u2003\u2003libraryname10: $('#libraryname10').val(),\u2003\u2003\u2003\u2003//if applicable, matching pair required\n\u2003\u2003libraryaddress10: $('#libraryaddress10').val()\u2003\u2003//if applicable, matching pair required\n\u2003},\n\u2003success: function (result) {\n\u2003\u2003console.log(result);\n\u2003\u2003if (result.status == \"1\") {\n\u2003\u2003\u2003//1 = submission success, use the guid returned (result.result) to check the status of your submission.\n\u2003\u2003\u2003// Average time of processing is 30-60 seconds\n\u2003\u2003\u2003document.getElementById(\"postresult\").innerHTML = result.status + \";\" + result.message + \";\" + result.result;\n\u2003\u2003\u2003// result.result is the GUID receipt for the submission, you can use this guid for checking the verification status\n\u2003\u2003} else {\n\u2003\u2003\u2003//0 = error\n\u2003\u2003\u2003document.getElementById(\"postresult\").innerHTML = result.status + \";\" + result.message + \";\" + result.result;\n\u2003\u2003}\n\u2003\u2003console.log(\"status : \" + result.status);\n\u2003\u2003console.log(\"result : \" + result.result);\n\u2003},\n\u2003error: function (result) {\n\u2003\u2003console.log(\"error!\");\n\u2003\u2003document.getElementById(\"postresult\").innerHTML = \"Unexpected Error\"\n\u2003}\n});\n"))),(0,i.kt)(l.Z,{value:"checkcode",label:"Check Source code verification submission status:",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'//Check Source Code Verification Status\n$.ajax({\n\u2003type: "GET",\n\u2003url: "//api-testnet.bitlayer.org/scan/api",\n\u2003data: {\n\u2003\u2003apikey: $(\'#apikey\').val(),\n\u2003\u2003guid: \'ezq878u486pzijkvvmerl6a9mzwhv6sefgvqi5tkwceejc7tvn\', //Replace with your Source Code GUID receipt above\n\u2003\u2003module: "contract",\n\u2003\u2003action: "checkverifystatus"\n\u2003},\n\u2003success: function (result) {\n\u2003\u2003console.log("status : " + result.status); //0=Error, 1=Pass\n\u2003\u2003console.log("message : " + result.message); //OK, NOTOK\n\u2003\u2003console.log("result : " + result.result); //result explanation\n\u2003\u2003$(\'#guidstatus\').html(">> " + result.result);\n\u2003},\n\u2003error: function (result) {\n\u2003\u2003alert(\'error\');\n\u2003}\n});\n')))))}b.isMDXComponent=!0}}]);